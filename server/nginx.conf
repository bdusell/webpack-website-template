user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    source_charset utf-8;
    charset utf-8;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;

    keepalive_timeout  65;

    # Remove server version information.
    server_tokens off;

    # Define some variables based on the Content-Type of the response.
    map $sent_http_content_type $csp_header {
        default   "";
        text/html $csp;
    }
    map $sent_http_content_type $xss_header {
        default   "";
        text/html "1; mode=block";
    }
    map $sent_http_content_type $rp_header {
        default   "";
        text/html $referrer_policy;
        text/css  $referrer_policy;
    }
    map $sent_http_content_type $fp_header {
        default   "";
        text/html $feature_policy;
    }

    # Require HTML pages to be revalidated every time, but aggressively cache
    # everything else. Note that $uri is normalized to the matched file name,
    # so it includes the .html extension for HTML pages.
    map $uri $cache_header {
        # Aggressively cache anything that has a cache-busting hash in its
        # file name.
        ~.*\.[0-9a-f]+\.[^./]+$ "public, max-age=31536000";
        # Always force the browser to check the server for updates to HTML
        # pages, although it can still return 304 Not Modified.
        default                 "public, no-cache";
    }

    server {
        listen 80;
        server_name _;
        root /usr/share/nginx/html;

        set $csp "default-src 'self'";
        set $referrer_policy "no-referrer-when-downgrade";
        set $feature_policy "camera 'none'; fullscreen 'none'; geolocation 'none'; microphone 'none'; payment 'none'; sync-xhr 'none'";

        # Security headers suggested by https://securityheaders.com/
        add_header Content-Security-Policy $csp_header always;
        add_header X-Frame-Options "DENY" always;
        add_header X-XSS-Protection $xss_header always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy $rp_header always;
        add_header Feature-Policy $fp_header always;

        # Enable static compression and disable dynamic compression.
        gzip_static on;
        gzip off;
        gzip_proxied any;

        # Caching configuration.
        add_header Cache-Control $cache_header;

        # Handle requests to "directories" ending in `/`.
        location ~ ^(.*)/$ {
            try_files $1/index.html =404;
        }

        # Disallow requests to pages named `index`.
        location ~ /index$ {
            return 404;
        }

        # Handle requests for static files. Treat URLs without extensions as
        # html files, while disallowing .html extensions.
        location / {
            if ($request_uri ~ \.html$) {
                return 404;
            }
            try_files $uri $uri.html =404;
        }
    }
}
